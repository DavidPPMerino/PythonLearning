""" MÃ³dulos e Pacotes """

" ModularizaÃ§Ã£o "

# â†’ Surgiu na decada de 60
# â†’ Sistemas cada vez maiores
# â†’ Foco: dividir um programa grande
# â†’ Foco: Aumentar a legibilidade
# â†’ Foco: Facilitar a manutenÃ§Ã£o

# import uteis

# num = int(input('Digite um valor: '))
# fat = uteis.fatorial(num)
# print(f'O fatorial de {num} Ã© {fat}')
# print(f'O dobro de {num} Ã© {uteis22.dobro(num)}')

" posso passar as funÃ§Ãµes criadas e passar para outro ficheiro na mesma pasta e importar esse ficheiro com as funÃ§Ãµes."

from uteis22 import fatorial, dobro

num = int(input('Digite um valor: '))
fat = fatorial(num)
print(f'O fatorial de {num} Ã© {fat}')
print(f'O dobro de {num} Ã© {dobro(num)}')

# NÃ£o Ã© aconselhado utilizar este tipo de importaÃ§Ã£o porque pode criar conflitos se houver importaÃ§Ã£o de outro mÃ³dulo que tambem tenha a mesma funÃ§Ã£o.
# Por exemplo se importar o dobro() e importar outro mÃ³dulo que tambem tenho dobro() a que prevalece Ã© a ultima importada.

" Vantagens"

# â†’ OrganizaÃ§Ã£o do cÃ³digo
# â†’ Facilidade na manutenÃ§Ã£o
# â†’ OcultaÃ§Ã£o de cÃ³digo detalhado
# â†’ ReutilizaÃ§Ã£o em outros projetos

""" Pacotes / Bibliotecas """

# Pacote uteis

# NÃºmeros           # Strings
# def kjlk():        # def asoi():   
# def adsa():        # def oiie():
# def asko():
# def klahsi():


# Datas             # Cores
# def laius():       # def qoije():
# def asujÃ§a():      # def aouha():
# def epioan():      # def qpowi():
# def qp+pd():       # def poqwi():
# def Ã§haoud():      # def fskjf():
# def aihnd():
# def qopei():


# Exemplo do pacote uteis com diversos modulos:
# NÃºmeros, Strings, Datas, Cores.

from uteis import datas
import Desafios

# O pacote Ã© basicamente uma pasta com os modulos lÃ¡ dentro

#   ğŸ“‚uteis
#     | __init__.py         # pasta do pacote pode ter init
#     â†³ ğŸ“‚cores
#     |     __init__.py
#     â†³ ğŸ“‚datas
#     |     __init__.py
#     â†³ ğŸ“‚nÃºmeros
#     |     __init__.py
#     â†³ ğŸ“‚strings
#           __init__.py